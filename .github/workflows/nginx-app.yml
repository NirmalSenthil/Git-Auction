name: Deploy Nginx App to ECS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (stage or qa)'
        required: true
        default: 'stage'
run-name: "#${{ github.run_number }} - ${{ github.event.inputs.environment }} - ${{ github.ref_name }}"

jobs:
  build-and-deploy:
    env:
      ENV_FILE: env/${{ github.event.inputs.environment }}.env
      AWS_DEFAULT_REGION: "us-east-1"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: print selected env file
        run: echo "${{ env.ENV_FILE }}"

      - name: Load environment variables
        id: set-env
        run: |
          echo "Loading environment variables from $ENV_FILE"
          if [ -f $ENV_FILE ]; then
            cat $ENV_FILE >> $GITHUB_ENV
          else
            echo "$ENV_FILE does not exist"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          REPOSITORY: ${{ env.IMAGE_NGINX_REPO_NAME }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo " displayed ECR_REGISTRY URI = ${{ steps.login-ecr.outputs.registry }} "
          echo "_______"
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg env=${{ env.IMAGE_BUILD_ENV }} -f Dockerfile-apache .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo " docker build successfully completed :) "

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: nginx-task-definition.json
          container-name: nginx
          image: ${{ steps.build-image.outputs.image }}	
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.AWS_ECS_NGINX_SERVICE }}
          cluster: ${{ env.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true  
