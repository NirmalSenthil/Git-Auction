name: Deploy Nginx App to ECS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (stage or qa)'
        required: true
        default: 'stage'
run-name: "#${{ github.run_number }} - ${{ github.event.inputs.environment }} - ${{ github.ref_name }}"

jobs:
  build-and-deploy:
    env:
      ENV_FILE: env/${{ github.event.inputs.environment }}.env
      AWS_DEFAULT_REGION: "us-east-1"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: print selected env file
        run: echo "${{ env.ENV_FILE }}"

      - name: Load environment variables
        id: set-env
        run: |
          echo "Loading environment variables from $ENV_FILE"
          if [ -f $ENV_FILE ]; then
            cat $ENV_FILE >> $GITHUB_ENV
          else
            echo "$ENV_FILE does not exist"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          REPOSITORY: ${{ env.IMAGE_NGINX_REPO_NAME }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo " displayed ECR_REGISTRY URI = ${{ steps.login-ecr.outputs.registry }} "
          echo "_______"
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg env=${{ env.IMAGE_BUILD_ENV }} -f Dockerfile-apache .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo " docker build successfully completed :) "
          
      - name: Deploy to ECS
        run: |
         aws ecs update-service --force-new-deployment --cluster ${{ env.AWS_ECS_CLUSTER }} --service ${{ env.AWS_ECS_NGINX_SERVICE }} --task-definition ${{ env.AWS_ECS_NGINX_TASK_DEFINITION }}
        
         max_checks=30
         check_count=0
         success=false

         check_deployment_status() {
           service_info=$(aws ecs describe-services --cluster ${{ env.AWS_ECS_CLUSTER }} --services ${{ env.AWS_ECS_NGINX_SERVICE }} --query 'services[0].deployments[?status==`PRIMARY`]' --output json)
           primary_deployment=$(echo "$service_info" | jq -c '.[0]')
          
           if [ -z "$primary_deployment" ]; then
             echo '{"success": false}'
             return
           fi

           desired_count=$(echo "$primary_deployment" | jq '.desiredCount')
           running_count=$(echo "$primary_deployment" | jq '.runningCount')
           rollout_state=$(echo "$primary_deployment" | jq -r '.rolloutState')
           task_definition_arn=$(echo "$primary_deployment" | jq -r '.taskDefinition')

           echo "Task Definition from AWS: $task_definition_arn"
           echo "Expected Task Definition: ${{ env.AWS_ECS_NGINX_TASK_DEFINITION }}"
           echo "Desired Count: $desired_count, Running Count: $running_count"
           echo "Rollout State: $rollout_state"

           task_definition_name=$(basename "$task_definition_arn" | cut -d: -f1)

           echo "Task Definition Name: $task_definition_name"
           echo "maybe error on this"
           if [ "$desired_count" -eq "$running_count" ] && [ "$task_definition_name" == "${{ env.AWS_ECS_NGINX_TASK_DEFINITION }}" ] && [ "$rollout_state" == "COMPLETED" ]; then
             echo '{"success": true, "desiredCount": '$desired_count', "runningCount": '$running_count'}'
           else
             echo '{"success": false, "desiredCount": '$desired_count', "runningCount": '$running_count'}'
           fi
         }

         while [ "$check_count" -lt "$max_checks" ]; do
           echo "going to sleep 45s"
           sleep 45
           deployment_status=$(check_deployment_status)

           echo "Deployment Status: $deployment_status"

           success=$(echo "$deployment_status" | jq -r '.success')
           echo "result = $success"

           if [ "$success" == "true" ]; then
             success=true
             break
           fi

           desired_count=$(echo "$deployment_status" | jq -r '.desiredCount')
           running_count=$(echo "$deployment_status" | jq -r '.runningCount')

           echo "Check $((check_count + 1)) of $max_checks: Desired tasks: $desired_count, Running tasks: $running_count."
           check_count=$((check_count + 1))
         done

         if [ "$success" == true ]; then
           echo "ECS deployment was successful!"
         else
           echo "ECS deployment verification failed! Deployment was not completed successfully."
           exit 1
         fi
