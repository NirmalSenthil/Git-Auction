name: Deploy Nginx App to ECS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (stage or qa)'
        required: true
        default: 'stage'
run-name: "#${{ github.run_number }} - ${{ github.event.inputs.environment }} - ${{ github.ref_name }}"
concurrency: 
  group: ${{ github.event.inputs.environment }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    env:
      ENV_FILE: env/${{ github.event.inputs.environment }}.env
      AWS_DEFAULT_REGION: "us-east-1"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: print selected env file
        run: echo "${{ env.ENV_FILE }}"

      - name: Load environment variables
        id: set-env
        run: |
          echo "Loading environment variables from $ENV_FILE"
          if [ -f $ENV_FILE ]; then
            cat $ENV_FILE >> $GITHUB_ENV
          else
            echo "$ENV_FILE does not exist"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          REPOSITORY: ${{ env.IMAGE_NGINX_REPO_NAME }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo " displayed ECR_REGISTRY URI = ${{ steps.login-ecr.outputs.registry }} "
          echo "_______"
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg env=${{ env.IMAGE_BUILD_ENV }} -f Dockerfile-apache .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo " docker build successfully completed :) "
          
      - name: Deploy to ECS
        run: |
          set -e

          aws ecs update-service --force-new-deployment --cluster ${{ env.AWS_ECS_CLUSTER }} --service ${{ env.AWS_ECS_NGINX_SERVICE }} --task-definition ${{ env.AWS_ECS_NGINX_TASK_DEFINITION }}

          max_checks=15
          check_count=0
          success=false
          echo "check new task Status"
          while [ "$check_count" -lt "$max_checks" ]; do
            sleep 45
            deployment_status=$(aws ecs describe-services --cluster ${{ env.AWS_ECS_CLUSTER }} --services ${{ env.AWS_ECS_NGINX_SERVICE }} --query 'services[0].deployments[?status==`PRIMARY`]' --output json | jq -c '.[0]')

            if [ -z "$deployment_status" ]; then
              echo "No primary deployment found."
              break
            fi

            desired_count=$(echo "$deployment_status" | jq '.desiredCount')
            running_count=$(echo "$deployment_status" | jq '.runningCount')
            rollout_state=$(echo "$deployment_status" | jq -r '.rolloutState')
            task_definition_arn=$(echo "$deployment_status" | jq -r '.taskDefinition')

            echo "Task Definition from AWS: $task_definition_arn"
            echo "Expected Task Definition:  ${{ env.AWS_ECS_NGINX_TASK_DEFINITION }}"
            echo "Desired Count: $desired_count, Running Count: $running_count"
            echo "Rollout State: $rollout_state"

            task_definition_name=$(basename "$task_definition_arn" | cut -d: -f1)

            echo "Task Definition Name: $task_definition_name"

            if [ "$desired_count" == "$running_count" ] && [ "$task_definition_name" == "${{ env.AWS_ECS_NGINX_TASK_DEFINITION }}" ] && [ "$rollout_state" == "COMPLETED" ]; then
              echo "Deployment Status: Success"
              success=true
              break
            else
              echo "Deployment Status: In Progress"
              echo "Check $((check_count + 1)) of $max_checks: Desired tasks: $desired_count, Running tasks: $running_count."
            fi

            check_count=$((check_count + 1))
            echo "Again going to check Task Status after 45sec."
            echo "***************"
          done

          if [ "$success" == true ]; then
            echo "ECS deployment was successful!"
            echo "Check $((check_count)) of $max_checks: Desired tasks: $desired_count, Running tasks: $running_count."
          else
            echo "ECS deployment verification failed! Deployment was not completed successfully."
            exit 1
          fi
